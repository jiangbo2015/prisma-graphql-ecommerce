# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Collection {
  createdAt: DateTime!
  description: String
  id: Int!
  products: [Product!]!
  slug: String!
  title: String!
  updatedAt: DateTime!
}

input CollectionBaseInput {
  description: String
  title: String!
}

type Customer {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  password: String!
  token: String!
  updatedAt: DateTime!
}

input CustomerBaseInput {
  email: String!
  name: String!
  password: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  collectionCreate(data: CollectionBaseInput!): Collection!
  collectionDelete(id: Int!): Collection!
  collectionUpdate(data: CollectionBaseInput!, id: Int!): Collection!
  customerCreate(data: CustomerBaseInput!): Customer!
  customerLogin(data: LoginInput!): Customer!
  delCustomer(id: Float!): Customer!
  productCreate(collectionId: Float!, data: ProductBaseInput!): Product!
  productDelete(id: Int!): Product!
  productUpdate(collectionId: Float!, data: ProductBaseInput!, id: Int!): Product!
  updateCustomer(data: CustomerBaseInput!, id: Int!): Customer!
  userCreate(data: UserBaseInput!): User!
  userDelete(id: Float!): User!
  userLogin(data: UserLoginInput!): User!
  userUpdate(data: UserBaseInput!, id: Int!): User!
}

type Product {
  collections: [Collection]
  createdAt: DateTime!
  description: String
  id: Int!
  image: String!
  price: Float!
  slug: String!
  title: String!
  updatedAt: DateTime!
}

input ProductBaseInput {
  description: String
  image: String!
  price: Float!
  title: String!
}

input ProductUpdateInput {
  description: String
  id: Float!
  image: String!
  price: Float!
  title: String!
}

type Query {
  collectionById(id: Int!): Collection!
  collectionList: [Collection!]!
  customerById(id: Float!): Customer!
  getCustomers: [Customer!]!
  getUsers: [User!]!
  productById(id: Float!): Product!
  productList: [Product!]!
  userById(id: Float!): User!
}

type User {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  password: String!
  role: String!
  token: String!
  updatedAt: DateTime!
}

input UserBaseInput {
  email: String!
  name: String!
  password: String!
  role: String
}

input UserLoginInput {
  email: String!
  password: String!
}
