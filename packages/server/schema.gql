# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Collection {
  createdAt: DateTime!
  id: Int!
  name: String!
  products: Product
  slug: String!
  updatedAt: DateTime!
}

input CollectionCreateInput {
  name: String!
  slug: String!
}

input CollectionUpdateInput {
  id: Float!
  name: String!
  slug: String!
}

type Customer {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  password: String!
  token: String!
  updatedAt: DateTime!
}

input CustomerCreateInput {
  email: String!
  id: Float
  name: String!
  password: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createCollection(data: CollectionCreateInput!): Collection!
  createCustomer(data: CustomerCreateInput!): Customer!
  createProduct(data: ProductCreateInput!): Product!
  createUser(data: UserCreateInput!): User!
  delCollection(id: Float!): Collection!
  delCustomer(id: Float!): Customer!
  delProduct(id: Int!): Product!
  delUser(id: Float!): User!
  login(data: UserLoginInput!): User!
  updateCollection(data: CollectionUpdateInput!): Collection!
  updateCustomer(data: CustomerCreateInput!): Customer!
  updateProduct(data: ProductUpdateInput!): Product!
  updateUser(data: UserCreateInput!): User!
}

type Product {
  collections: [Collection!]!
  createdAt: DateTime!
  id: Int!
  image: String!
  price: Float!
  slug: String!
  title: String!
  updatedAt: DateTime!
}

input ProductCreateInput {
  collectionId: Float!
  image: String!
  price: Float!
  slug: String!
  title: String!
}

input ProductUpdateInput {
  collectionId: Float!
  id: Float!
  image: String!
  price: Float!
  slug: String!
  title: String!
}

type Query {
  CustomerById(id: Float!): Customer!
  allCollections: [Collection!]!
  allCustomers: [Customer!]!
  allProducts: [Product!]!
  allUsers: [User!]!
  collectionById(id: Float!): Collection!
  productById(id: Float!): Product!
  userById(id: Float!): User!
}

type User {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  password: String!
  role: String!
  token: String!
  updatedAt: DateTime!
}

input UserCreateInput {
  email: String!
  id: Float
  name: String!
  password: String!
  role: String
}

input UserLoginInput {
  email: String!
  password: String!
}
